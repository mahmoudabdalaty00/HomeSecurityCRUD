// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Date;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250424150503_IntiData")]
    partial class IntiData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Server.Models.Entities.Alarm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoResponseTriggered")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFalseAlarm")
                        .HasColumnType("bit");

                    b.Property<Guid?>("NotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TriggerType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TriggeredAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("HouseId");

                    b.HasIndex("NotificationId");

                    b.ToTable("Alarms");
                });

            modelBuilder.Entity("Server.Models.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Server.Models.Entities.Device", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("HouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeviceId");

                    b.HasIndex("HouseId");

                    b.ToTable("Devices");

                    b.HasData(
                        new
                        {
                            DeviceId = new Guid("f0e831cf-1223-4344-a8ff-2505a905c2b7"),
                            DeviceName = "Thermostat",
                            DeviceType = "Temperature",
                            HouseId = new Guid("d3b8a8f1-4c3b-4b8a-9c3b-4b8a9c3b4b8a"),
                            Status = "Active"
                        },
                        new
                        {
                            DeviceId = new Guid("d017b91b-f958-46ba-be9b-c95a3769e217"),
                            DeviceName = "Security Camera",
                            DeviceType = "Camera",
                            HouseId = new Guid("e4c9b9f2-5d4c-5c9b-8d4c-5c9b8d4c5c9b"),
                            Status = "Active"
                        },
                        new
                        {
                            DeviceId = new Guid("dd7c82c9-8b51-45a3-b470-d48a24096f34"),
                            DeviceName = "Smart Lock",
                            DeviceType = "Access Control",
                            HouseId = new Guid("2fa0c930-3bdf-40a4-8d47-9ef458520c76"),
                            Status = "Inactive"
                        },
                        new
                        {
                            DeviceId = new Guid("7ba4c562-ab18-4b66-99d2-57cd0831a532"),
                            DeviceName = "Smoke Detector",
                            DeviceType = "Safety",
                            HouseId = new Guid("95374554-afab-467f-b689-d53dc1ea92a5"),
                            Status = "Active"
                        },
                        new
                        {
                            DeviceId = new Guid("1511169f-8e5f-4847-b218-96bb8ee19ab5"),
                            DeviceName = "Light Bulb",
                            DeviceType = "Lighting",
                            HouseId = new Guid("a05d91e7-556c-480b-88ab-d9c5da38bea0"),
                            Status = "Active"
                        },
                        new
                        {
                            DeviceId = new Guid("4a2d73b3-e951-403a-9149-4dd97db6cd2c"),
                            DeviceName = "Water Leak Sensor",
                            DeviceType = "Safety",
                            HouseId = new Guid("16a86fdb-2c84-4302-824e-a49c00e4369e"),
                            Status = "Inactive"
                        },
                        new
                        {
                            DeviceId = new Guid("cb5bda8f-a6c4-4fbc-91b1-28a7bbb927f8"),
                            DeviceName = "Motion Sensor",
                            DeviceType = "Security",
                            HouseId = new Guid("57445249-2a18-4552-a929-d9e5949a7fb4"),
                            Status = "Active"
                        },
                        new
                        {
                            DeviceId = new Guid("aff910da-bd8c-4dc5-9d04-a289a6c8e036"),
                            DeviceName = "Smart Doorbell",
                            DeviceType = "Access Control",
                            HouseId = new Guid("6963f81e-16b2-4168-84aa-49c65c7ec2fc"),
                            Status = "Active"
                        },
                        new
                        {
                            DeviceId = new Guid("20d87e50-c4b7-4a48-982c-1b6c5c869c2c"),
                            DeviceName = "Garage Door Opener",
                            DeviceType = "Convenience",
                            HouseId = new Guid("648c36e6-cf4a-4686-a26e-a5b2605491c4"),
                            Status = "Inactive"
                        },
                        new
                        {
                            DeviceId = new Guid("6270a75e-865d-4983-9f77-910aff4a7f57"),
                            DeviceName = "Solar Panel Monitor",
                            DeviceType = "Energy",
                            HouseId = new Guid("0762f142-6ccb-4166-a049-f6c289447e6d"),
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("Server.Models.Entities.History", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("Server.Models.Entities.House", b =>
                {
                    b.Property<Guid>("HouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HouseId");

                    b.ToTable("Houses");

                    b.HasData(
                        new
                        {
                            HouseId = new Guid("d3b8a8f1-4c3b-4b8a-9c3b-4b8a9c3b4b8a"),
                            Address = "123 Palm Street",
                            City = "Cairo",
                            Country = "Egypt",
                            Description = "Luxurious villa with pool",
                            Name = "Villa Oasis",
                            State = "Cairo Governorate",
                            ZipCode = "12345"
                        },
                        new
                        {
                            HouseId = new Guid("e4c9b9f2-5d4c-5c9b-8d4c-5c9b8d4c5c9b"),
                            Address = "456 Beach Avenue",
                            City = "Alexandria",
                            Country = "Egypt",
                            Description = "Cozy bungalow near the sea",
                            Name = "Sunset Bungalow",
                            State = "Alexandria Governorate",
                            ZipCode = "54321"
                        },
                        new
                        {
                            HouseId = new Guid("2fa0c930-3bdf-40a4-8d47-9ef458520c76"),
                            Address = "789 City Center",
                            City = "Giza",
                            Country = "Egypt",
                            Description = "Modern apartment in downtown",
                            Name = "Urban Apartment",
                            State = "Giza Governorate",
                            ZipCode = "67890"
                        },
                        new
                        {
                            HouseId = new Guid("95374554-afab-467f-b689-d53dc1ea92a5"),
                            Address = "101 Farm Road",
                            City = "Fayoum",
                            Country = "Egypt",
                            Description = "Peaceful retreat in the countryside",
                            Name = "Country Cottage",
                            State = "Fayoum Governorate",
                            ZipCode = "11223"
                        },
                        new
                        {
                            HouseId = new Guid("a05d91e7-556c-480b-88ab-d9c5da38bea0"),
                            Address = "202 Highland Blvd",
                            City = "Aswan",
                            Country = "Egypt",
                            Description = "Rustic lodge with scenic views",
                            Name = "Mountain Lodge",
                            State = "Aswan Governorate",
                            ZipCode = "44556"
                        },
                        new
                        {
                            HouseId = new Guid("16a86fdb-2c84-4302-824e-a49c00e4369e"),
                            Address = "303 Sand Dunes Way",
                            City = "Siwa",
                            Country = "Egypt",
                            Description = "Elegant villa in the desert oasis",
                            Name = "Desert Villa",
                            State = "Matrouh Governorate",
                            ZipCode = "99887"
                        },
                        new
                        {
                            HouseId = new Guid("57445249-2a18-4552-a929-d9e5949a7fb4"),
                            Address = "404 Shoreline Ave",
                            City = "Luxor",
                            Country = "Egypt",
                            Description = "Charming house on the lake",
                            Name = "Lake House",
                            State = "Luxor Governorate",
                            ZipCode = "77665"
                        },
                        new
                        {
                            HouseId = new Guid("6963f81e-16b2-4168-84aa-49c65c7ec2fc"),
                            Address = "505 Heritage St",
                            City = "Minya",
                            Country = "Egypt",
                            Description = "Grand manor with rich history",
                            Name = "Historic Manor",
                            State = "Minya Governorate",
                            ZipCode = "33445"
                        },
                        new
                        {
                            HouseId = new Guid("648c36e6-cf4a-4686-a26e-a5b2605491c4"),
                            Address = "606 Oceanview Dr",
                            City = "Hurghada",
                            Country = "Egypt",
                            Description = "Spacious villa by the sea",
                            Name = "Seaside Villa",
                            State = "Red Sea Governorate",
                            ZipCode = "22111"
                        },
                        new
                        {
                            HouseId = new Guid("0762f142-6ccb-4166-a049-f6c289447e6d"),
                            Address = "707 Rocky Path",
                            City = "Marsa Alam",
                            Country = "Egypt",
                            Description = "Secluded cabin on a cliff",
                            Name = "Cliffside Cabin",
                            State = "Red Sea Governorate",
                            ZipCode = "99200"
                        });
                });

            modelBuilder.Entity("Server.Models.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SendEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("SendPush")
                        .HasColumnType("bit");

                    b.Property<bool>("SendSMS")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("HouseId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Server.Models.Entities.UserImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOwnerImage")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("UserImages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Server.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Server.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Server.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Models.Entities.Alarm", b =>
                {
                    b.HasOne("Server.Models.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId");

                    b.HasOne("Server.Models.Entities.House", "House")
                        .WithMany()
                        .HasForeignKey("HouseId");

                    b.HasOne("Server.Models.Entities.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId");

                    b.Navigation("Device");

                    b.Navigation("House");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Server.Models.Entities.Device", b =>
                {
                    b.HasOne("Server.Models.Entities.House", "House")
                        .WithMany("Devices")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("House");
                });

            modelBuilder.Entity("Server.Models.Entities.Notification", b =>
                {
                    b.HasOne("Server.Models.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId");

                    b.HasOne("Server.Models.Entities.House", "House")
                        .WithMany()
                        .HasForeignKey("HouseId");

                    b.Navigation("Device");

                    b.Navigation("House");
                });

            modelBuilder.Entity("Server.Models.Entities.UserImage", b =>
                {
                    b.HasOne("Server.Models.Entities.ApplicationUser", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("Server.Models.Entities.House", b =>
                {
                    b.Navigation("Devices");
                });
#pragma warning restore 612, 618
        }
    }
}
